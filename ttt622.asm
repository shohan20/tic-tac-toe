.model small
.data
sng db 'NEW GAME$'
hsr db 'EXIT$'
poh db 'HOW TO PLAY$'
plr1 db 'ONE PLAYER$'
plr2 db 'TWO PLAYERS$'
ttt db '>> TIC-TAC-TOE GAME$'
backp1 db 'BACK$'
sign1 db 'SIGN: $'
pguc db 'This Page is under construction :p $'
pr db 'Press a key$'
r1 dw 50
r2 dw 120
r3 dw 190
r4 dw 260
c1 dw 50
c2 dw 120
c3 dw 190
c4 dw 260

rp10 dw 110
rp11 dw 150  
rp12 dw 180    ;85
rp13 dw 210
rp14 dw 240
rp15 dw 280

cp11 dw 170 
cp12 dw 460
cp13 dw 250 
cp14 dw 360

tro1 dw 65
tro2 dw 100
tro3 dw 135
tro4 dw 170
tc1 dw 385
tc2 dw 425
tc3 dw 465
tc4 dw 505
t_r dw 0
t_c dw 0  
xc dw 0
yc dw 0
x db 0
y db 0 
c db ?
n db 0
f dw 0 
cdiv dw 0 
ce dw 0 
be dw 0
point dw 0 
win db 0
k db 0 
v db 0 
count db 1
wi db 0  
col db 7
num db 0 
cnr dw 0
selp db 0 
plkey db 0
signx db 0  
ue db 0  
sp1 db 'Player1$'
sp2 db 'Player2$'
sp3 db 'Computer$'
oppon db 'Opponent$'
sp4 db 'You$'
wo1 db ' won! ',1,'$'
wo2 db ' won! ',2,'$'
wo4 db ', You won! ',2,'$'
wo3 db ', You have lost! ',1,'$'
invin db 'Invalid Input$'
gtie db 'Game tied!  ',1,2,1,2,'$'
pint db 'PlayerInTurn: $'
shohan db 'Shorifuzzaman$'
shafayat db 'Shafayat$'
prs db 'MAIN MENU$'
ent db 'EXIT$'
conti db 'CONTINUE$'
entern db 'Enter Name:$'
check db 11 dup(0)
np1 db 100 dup(0)
np2 db 100 dup(0)
input db 'INPUT: $'
filename db 'ttt622.txt',0
buffer db 1000 dup(0) 
handle dw ?
xc1 dw 0 
yc1 dw 0 
tcolor db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2
 db 2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
 db 2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2
 db 2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0
 db 0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,0,0
 db 0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2
 db 2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
 db 2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
 db 0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2
 db 2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2
 db 2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,2,2,2,2
 db 2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,'$'
 
 icolor db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,6,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0
 db 6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0
 db 0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'$'
 
 c_color db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0
 db 0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0
 db 0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6
 db 0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6
 db 6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6
 db 6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'$'

 a_color db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6
 db 6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,0,0
 db 0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0
 db 0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0
 db 0,0,0,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,0
 db 0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,'$'
 
 o_color db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6
 db 6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0
 db 0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0
 db 0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0
 db 0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0
 db 0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0
 db 0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0
 db 0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'$'
 
 e_color db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0
 db 0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6
 db 6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,0,0
 db 0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0
 db 0,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6
 db 6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6
 db 6,6,6,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0
 db 0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0
 db 0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'$'
 
 crossx db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0
 db 0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0
 db 0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0
 db 0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0
 db 0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0
 db 0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,0,0,0,0,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,0,0,0,0,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,0,0,0,0,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0
 db 0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0
 db 0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,0
 db 0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,0
 db 0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0
 db 0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'$'
 
 sbr db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0
 db 6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'$'
 
 br2 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,6,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,6,6,0,0,0,0,0,0,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,6,6,6,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
 db 6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 db 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,'$'
 let dw 0 
 lco db 0 
 rae db 11 dup(0)
 .stack 100h
 .code
main  proc
      mov    ax,@data
      mov    ds,ax 
      mov  es,ax  
	  call pagefs
	  mov ah,00h 
	  int 16h 
	  call page1 
	  Exit:
	  mov ah,0
	  mov al,12h
	  int 10h
      mov    ah,4Ch
      int    21h
main  endp
;................................new game......................
newgame1 proc
	
	newgame:
	mov wi,0 	
	mov ah,0
	mov al,12h
	int 10h
	call initial
	game:
	call clear
	cmp selp,1  
	jne tp
	call select
	jmp opl
	tp:
	call printin 
	opl:
	call check1
	inc n
	cmp n,9
	je gout
	cmp win,0
	je game
	jmp ng
	gout:
	call clear
	call tie
	ng:
	call sleep
	call sleep 
	call page10
	cmp count,2
	jne nex4
	jmp newgame
	nex4:
	ret
	newgame1 endp 
	
select proc
	cmp f,0 
	jne comt
	call printin
	jmp keyb
	comt:
	call cominp
	keyb:
	ret
	select endp

;...............initial..........
initial proc
	mov v,0 
	mov n,0 
	mov col,7
	mov win,0
	mov ax,cdiv
	mov cl,2
	div cl 
	cmp ah,0 
	jne altr
	mov f,0
	jmp altre
	altr:
	mov f,1 
	altre:
	inc cdiv 
	mov si,0 
	mov cx,11 
	cini:
	mov check[si],0
	inc si
	loop cini
	ret
	initial endp
;..................tie...........
tie proc 
	cmp win,0
	je tied
	ret
  tied:
	mov y,17
    mov x,10 
    mov si,0
   otin1:
    call cursor
    mov al,gtie[si]
    cmp al,'$'
    je to1
    mov c,al 
    mov bl,3
    call printchar
    inc si
    inc x
    jmp otin1
    to1:
	ret
	tie endp
;..................String winP1...........  
win1 proc
    mov y,17
    mov x,10 
    mov si,0
	pwin1:
	call cursor
	mov al,np1[si]
	cmp al,'$'
	je pw1
	mov c,al
	mov bl,3
	call printchar 
	inc si 
	inc x
	jmp pwin1
	pw1:
	
	mov si,0 
   owin1:
    call cursor
	cmp selp,1 
	jne man1
	mov al,wo4[si]
	jmp com1
	man1:
    mov al,wo1[si]
	com1:
    cmp al,'$'
    je ow1
    mov c,al 
    mov bl,3
    call printchar
    inc si
    inc x
    jmp owin1
    ow1:
    ret
    win1 endp
;.....................String winP2........
win2 proc
    mov y,17
    mov x,10 
    mov si,0
	
	pwin2:
	call cursor
	mov al,np2[si]
	cmp al,'$'
	je pw2
	mov c,al
	mov bl,3
	call printchar 
	inc si 
	inc x
	jmp pwin2
	pw2:
	
	 
	mov si,0 
   owin2:

    call cursor
	cmp selp,1
	jne man2
	mov al,wo3[si]
	jmp com2
	man2:
    mov al,wo2[si]
	com2:
    cmp al,'$'
    je ow2
    mov c,al 
    mov bl,3
    call printchar
    inc si
    inc x
    jmp owin2
    ow2:
    ret
   win2 endp
;.................check...........
check1 proc
    
    call checkD 
    cmp win,0
    jne check2
    call checkr
    cmp win,0
    jne check2 
    call checkc
    cmp win,0
    jne check2
    ret
  check2: 
	
    cmp win,1
    jne check3
    call win1
    ret
    check3:
    call win2
    ret
    check1 endp 
;..................drawd1................
drawd1 proc
	mov col,2 
	cmp wi,1 
	jne pballd1
	cmp signx,1 
	je els1
	els17:
	mov point,3 
	call cross
	mov point,5
	call cross
	mov point,7
	call cross
	ret
	pballd1:
	cmp signx,1 
	je els17
	els1:
	mov point,3 
	call ball
	mov point,5
	call ball
	mov point,7
	call ball
	ret 
	drawd1 endp

;..................drawd1................
drawd2 proc
	cmp wi,1 
	mov col,2 
	jne pballd2 
	cmp signx,1 
	je els2
	els16:
	mov point,1
	call cross
	mov point,5
	call cross
	mov point,9
	call cross
	ret
	pballd2:
	cmp signx,1 
	je els16
	els2:
	mov point,1
	call ball
	mov point,5
	call ball
	mov point,9
	call ball
	ret
	drawd2 endp
;.................row1...................
drow1 proc
	
	cmp wi,1 
	mov col,2 
	jne pballr1
	cmp signx,1 
	je els3
	els15:
	mov point,1
	call cross
	mov point,2 
	call cross
	mov point,3 
	call cross
	ret
	
	pballr1:
	cmp signx,1 
	je els15
	els3:
	mov point,1
	call ball
	mov point,2 
	call ball
	mov point,3 
	call ball
	ret 
	drow1 endp
	
;.................row2...................
drow2 proc 
	
	cmp wi,1 
	mov col,2 
	jne pballr2 
	cmp signx,1 
	je els5
	els14:
	mov point,4 
	call cross
	mov point,5  
	call cross
	mov point,6  
	call cross
	ret
	
	pballr2:
	cmp signx,1 
	je els14
	els5:
	mov point,4 
	call ball
	mov point,5  
	call ball
	mov point,6  
	call ball
	ret 
	drow2 endp

;........................................row2...................
drow3 proc 
	cmp wi,1 
	mov col,2 
	jne pballr3 
	cmp signx,1 
	je els6
	els13:
	mov point,7 
	call cross
	mov point,8 
	call cross
	mov point,9 
	call cross
	ret
	
	pballr3:
	cmp signx,1 
	je els13
	els6:
	mov point,7 
	call ball
	mov point,8  
	call ball
	mov point,9  
	call ball
	ret 
	drow3 endp
;.....................................draw coloumn..............
dcolu1 proc 
	
	cmp wi,1 
	mov col,2 
	jne pballc1
	cmp signx,1 
	je els7
	els12:
	mov point,1  
	call cross
	mov point,4 
	call cross
	mov point,7
	call cross
	ret
	
	
	pballc1:
	cmp signx,1 
	je els12
	els7:
	mov point,1 
	call ball
	mov point,4 
	call ball
	mov point,7 
	call ball
	ret 
	dcolu1 endp
	
dcolu2 proc
	cmp wi,1 
	mov col,2 
	jne pballc2 
	cmp signx,1 
	je els8
	els11:
	mov point,2   
	call cross
	mov point,5  
	call cross
	mov point,8
	call cross
	ret
	
	
	pballc2:
	cmp signx,1 
	je els11
	els8:
	mov point,2  
	call ball
	mov point,5  
	call ball
	mov point,8  
	call ball
	ret 
	dcolu2 endp

dcolu3 proc
	cmp wi,1 
	mov col,2 
	jne pballc3
	cmp signx,1 
	je els9
	els10:
	mov point,3   
	call cross
	mov point,6  
	call cross
	mov point,9
	call cross
	ret
	pballc3:
	
	cmp signx,1 
	je els10
	els9:
	mov point,3  
	call ball
	mov point,6  
	call ball
	mov point,9 
	call ball
	ret 
	dcolu3 endp
;...........................................checkd.............
checkD proc
    mov al,check[1]
    cmp al,check[5]
    jne drl
    cmp al,check[9]
    jne drl
	mov wi,al
	cmp al,0 
	je reg1
	call drawd2
	reg1:
	mov al,wi
    mov win,al
    ret
   drl:
    mov al,check[3]
    cmp al,check[5]
    jne dlr
    cmp al,check[7]
    jne dlr
	mov wi,al
	cmp al,0 
	je reg2
	call drawd1
	reg2:
	mov al,wi
    mov win,al
    dlr:
    ret 
    checkD endp 
;.................................checkr..........................
checkr proc
    mov al,check[1]
    cmp al,check[2]
    jne cro2
    cmp al,check[3]
    jne cro2
	mov wi,al
	cmp al,0 
	je reg3
	call drow1
	reg3:
	mov al,wi
    mov win,al
    ret
   cro2:
    mov al,check[4]
    cmp al,check[5]
    jne cro3
    cmp al,check[6]
    jne cro3
    mov wi,al
	cmp al,0 
	je reg4
	call drow2
	reg4:
	mov al,wi
    mov win,al
    ret
   cro3:
    mov al,check[7]
    cmp al,check[8]
    jne cro4
    cmp al,check[9]
    jne cro4
    mov wi,al
	cmp al,0 
	je reg5
	call drow3
	reg5:
	mov al,wi
    mov win,al
   cro4:
    ret
    checkr endp 

;.........................................checkc...........................  
checkc proc
    mov al,check[1]
    cmp al,check[4]
    jne cco2
    cmp al,check[7]
    jne cco2
	mov wi,al
	cmp al,0 
	je reg6
	call dcolu1
	reg6:
	mov al,wi
    mov win,al
    ret
   cco2:
    mov al,check[2]
    cmp al,check[5]
    jne cco3
    cmp al,check[8]
    jne cco3
	mov wi,al
	cmp al,0 
	je reg7
	call dcolu2
	reg7:
	mov al,wi
    mov win,al
    ret
   cco3:
    mov al,check[3]
    cmp al,check[6]
    jne cco4
    cmp al,check[9]
    jne cco4
	mov wi,al
	cmp al,0 
	je reg8
	call dcolu3
	reg8:
	mov al,wi
    mov win,al
   cco4:
    ret
    checkc endp
;......................................cross................................
cross proc 
    cmp point,7
    jne next1 
    mov ax,r1
    add ax,15 
    mov xc,ax
    mov ax,c1
    add ax,11 
    mov yc,ax
	
    mov ax,r1
    add ax,55
    mov xc1,ax
    mov ax,c1
    add ax,58 
    mov yc1,ax
    call printcross
    ret
  next1: 
    cmp point,8 
    jne next2 
    mov ax,r1
    add ax,15 
    mov xc,ax
    mov ax,c2
    add ax,11 
    mov yc,ax
	
	mov ax,r1
    add ax,55 
    mov xc1,ax
    mov ax,c2
    add ax,58 
    mov yc1,ax
    call printcross
    ret
  next2:
    cmp point,9
    jne next3 
    mov ax,r1
    add ax,15 
    mov xc,ax
    mov ax,c3
    add ax,11 
    mov yc,ax
	
	mov ax,r1
    add ax,55 
    mov xc1,ax
    mov ax,c3
    add ax,58 
    mov yc1,ax
    call printcross
    ret
  next3:
    cmp point,4
    jne next4 
    mov ax,r2
    add ax,15 
    mov xc,ax
    mov ax,c1
    add ax,11 
    mov yc,ax
	
	mov ax,r2
    add ax,55 
    mov xc1,ax
    mov ax,c1
    add ax,58 
    mov yc1,ax
    call printcross
  next4:
    cmp point,5
    jne next5 
    mov ax,r2
    add ax,15 
    mov xc,ax
    mov ax,c2
    add ax,11 
    mov yc,ax
	
	mov ax,r2
    add ax,55 
    mov xc1,ax
    mov ax,c2
    add ax,58 
    mov yc1,ax
    call printcross 
    ret
  next5: 
    cmp point,6
    jne next6 
    mov ax,r2
    add ax,15 
    mov xc,ax
    mov ax,c3
    add ax,11 
    mov yc,ax
	
	mov ax,r2
    add ax,55 
    mov xc1,ax
    mov ax,c3
    add ax,58 
    mov yc1,ax
    call printcross
    ret
  next6:
    cmp point,1 
    jne next7 
    mov ax,r3
    add ax,15 
    mov xc,ax
    mov ax,c1
    add ax,11 
    mov yc,ax
	
	mov ax,r3
    add ax,55 
    mov xc1,ax
    mov ax,c1
    add ax,58 
    mov yc1,ax
    call printcross
    ret
  next7: 
    cmp point,2 
    jne next8 
    mov ax,r3
    add ax,15 
    mov xc,ax
    mov ax,c2
    add ax,11 
    mov yc,ax
	
	mov ax,r3
    add ax,55 
    mov xc1,ax
    mov ax,c2
    add ax,58 
    mov yc1,ax
    call printcross
    ret
  next8:
    cmp point,3 
    jne next9 
    mov ax,r3
    add ax,15 
    mov xc,ax
    mov ax,c3
    add ax,11 
    mov yc,ax
	
	mov ax,r3
    add ax,55 
    mov xc1,ax
    mov ax,c3
    add ax,58 
    mov yc1,ax
    call printcross
    ret
  next9: 
    ret
    cross endp
;......................................ball...............
ball proc
    cmp point,7
    jne nextb1 
    mov ax,r1
    add ax,15 
    mov xc,ax
    mov ax,c1
    add ax,13 
    mov yc,ax
	
	mov ax,r1
    add ax,55 
    mov xc1,ax
    mov ax,c1
    add ax,56 
    mov yc1,ax
    call printball
    ret
  nextb1: 
    cmp point,8 
    jne nextb2 
    mov ax,r1
    add ax,15
    mov xc,ax
    mov ax,c2
    add ax,13 
    mov yc,ax
	
	mov ax,r1
    add ax,55 
    mov xc1,ax
    mov ax,c2
    add ax,56  
    mov yc1,ax
    call printball
    ret
  nextb2:
    cmp point,9 
    jne nextb3 
    mov ax,r1
    add ax,15 
    mov xc,ax
    mov ax,c3
    add ax,13 
    mov yc,ax
	
	mov ax,r1
    add ax,55 
    mov xc1,ax
    mov ax,c3
    add ax,56 
    mov yc1,ax
    call printball
    ret
  nextb3:
    cmp point,4
    jne nextb4 
    mov ax,r2
    add ax,15 
    mov xc,ax
    mov ax,c1
    add ax,13  
    mov yc,ax
	
	mov ax,r2
    add ax,55 
    mov xc1,ax
    mov ax,c1
    add ax,56 
    mov yc1,ax
    call printball
  nextb4:
    cmp point,5
    jne nextb5 
    mov ax,r2
    add ax,15 
    mov xc,ax
    mov ax,c2
    add ax,13  
    mov yc,ax
	
	mov ax,r2
    add ax,55 
    mov xc1,ax
    mov ax,c2
    add ax,56 
    mov yc1,ax
    call printball 
    ret
  nextb5: 
    cmp point,6
    jne nextb6 
    mov ax,r2
    add ax,15 
    mov xc,ax
    mov ax,c3
    add ax,13  
    mov yc,ax
	
	mov ax,r2
    add ax,55 
    mov xc1,ax
    mov ax,c3
    add ax,56 
    mov yc1,ax
    call printball
    ret
  nextb6:
    cmp point,1 
    jne nextb7 
    mov ax,r3
    add ax,15  
    mov xc,ax
    mov ax,c1
    add ax,13  
    mov yc,ax
	
	mov ax,r3
    add ax,55 
    mov xc1,ax
    mov ax,c1
    add ax,56 
    mov yc1,ax
    call printball
    ret
  nextb7: 
    cmp point,2 
    jne nextb8 
    mov ax,r3
    add ax,15  
    mov xc,ax
    mov ax,c2
    add ax,13  
    mov yc,ax
	
	mov ax,r3
    add ax,55 
    mov xc1,ax
    mov ax,c2
    add ax,56 
    mov yc1,ax
    call printball
    ret
  nextb8:
    cmp point,3 
    jne nextb9 
    mov ax,r3
    add ax,15 
    mov xc,ax
    mov ax,c3
    add ax,13  
    mov yc,ax
	
	mov ax,r3
    add ax,55 
    mov xc1,ax
    mov ax,c3
    add ax,56 
    mov yc1,ax
    call printball
    ret
  nextb9:
    ret
    ball endp
;.......................................printball.......................
printball proc 
	mov cx,yc 
	mov si,0 
	bo20:
	mov dx,xc  
	bo21:
	mov ah,0ch
	mov al,o_color[si]
	cmp al,6 
	jne oub
	cmp wi,1 
	jl oub 
	je orm
	mov al,4 
	jmp oub 
	orm:
	mov al,2 
	oub:
	int 10h 
	inc dx 
	inc si 
	cmp dx,xc1 
	jne bo21 
	inc cx 
	cmp cx,yc1 
	jne bo20
    
    ret
    printball endp   
;......................................printcross..........................
printcross proc
	mov cx,yc 
	mov si,0 
	xo20:
	mov dx,xc  
	xo21:
	mov ah,0ch
	mov al,crossx[si]
	cmp al,6 
	jne crub
	cmp wi,1 
	jl crub 
	je corm
	mov al,4 
	jmp crub 
	corm:
	mov al,2 
	crub:
	int 10h 
	inc dx 
	inc si 
	cmp dx,xc1 
	jne xo21 
	inc cx 
	cmp cx,yc1 
	jne xo20 
   ret
   printcross endp 
;......................................colorchar.............................
colorchar proc
	cmp k,'7'
	jne ndi1
	mov x,50 
	mov y,5 
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ret
	
	ndi1:
	cmp k,'8'
	jne ndi2
	mov x,55 
	mov y,5 
	call cursor 
	mov bl,7
	mov al,k
	mov c,al
	call printchar
	ret
	
	ndi2:
	cmp k,'9' 
	jne ndi3
	mov x,60
	mov y,5 
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ret
	
	ndi3:
	cmp k,'4'
	jne ndi4
	mov x,50  
	mov y,7 
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ret
	
	ndi4:
	cmp k,'5' 
	jne ndi5
	mov x,55 
	mov y,7 
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ret
	
	ndi5:
	cmp k,'6' 
	jne ndi6
	mov x,60  
	mov y,7 
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ret
	
	ndi6:
	cmp k,'1'
	jne ndi7
	mov x,50   
	mov y,9
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ret
	
	ndi7:
	cmp k,'2'
	jne ndi8
	mov x,55  
	mov y,9 
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ret
	
	ndi8:
	cmp k,'3'
	jne ndi9
	mov x,60  
	mov y,9 
	call cursor 
	mov bl,7
	mov al,k 
	mov c,al
	call printchar
	ndi9:
	ret
	colorchar endp
;..........................................printin..........................
printin proc
    mov ah,0
	int 16h
	cmp al,27
	jne yu1
	call page1
	yu1:
	mov ah,0 
	mov k,al
	sub ax,30h
	mov point,ax
	mov si,ax
	cmp check[si],0
	jne invalid
	cmp ax,1 
	jl invalid
	cmp ax,9
	jg invalid
	
	mov v,1 
	cmp f,0
	jne flag
	mov check[si],1
	cmp signx,0 
	jne nsign1
	call cross
	jmp nsign7
	nsign1:
	call ball 
	nsign7:
	mov f,1
    jmp flag1
  flag:
    mov check[si],2 
	cmp signx,0 
	jne nsign2 
    call ball
	jmp nsign8
	nsign2:
	call cross
	nsign8:
    mov f,0
  flag1:
	call clearinput
	mov al,k
	mov c,al 
	mov y,16 
	mov x,55
	call cursor
	mov bl,7
	call printchar
	ret
   invalid:
	mov v,0 
	dec n 
	call invalidin
	ret
	printin endp
;..................................comdef.................
comdef proc
	mov cnr,1
  comrow:
	mov si,cnr
	cmp si,10 
	je brow
	mov al,0 
	mov al,check[si]
	add al,check[si+1]
	add al,check[si+2]
	add cnr,3
	cmp al,num
	jne comrow
	sub cnr,3
	mov si,cnr
	l1:
	cmp check[si],0
	je pj
	inc si
	jmp l1
	pj:
	mov point,si
	mov check[si],4
	ret
	
	brow:
	mov cnr,1
  comcol:
	mov si,cnr
	cmp si,4
	je bcol
	mov al,0 
	mov al,check[si]
	add al,check[si+3]
	add al,check[si+6]
	add cnr,1
	cmp al,num 
	jne comcol
	sub cnr,1
	mov si,cnr
	l2:
	cmp check[si],0
	je pj2
	add si,3
	jmp l2
	pj2: 
	mov point,si
	mov check[si],4
	ret
	bcol:
	mov al,0 
	mov al,check[1]
	add al,check[5]
	add al,check[9]
	cmp al,num 
	jne bdia
	mov si,1
	l3:
	cmp check[si],0
	je pj3
	add si,4
	jmp l3
	pj3: 
	mov point,si
	mov check[si],4
	ret
	bdia:
	mov al,0 
	mov al,check[3]
	add al,check[5]
	add al,check[7]
	cmp al,num 
	jne bdia1
	mov si,3
	l4:
	cmp check[si],0
	je pj4
	add si,2
	jmp l4
	pj4: 
	mov point,si
	mov check[si],4
	bdia1:
	ret
	comdef endp
	
other proc
	cmp ue,3  
	jl yte
	mov si,5 
	cmp check[si],0 
	jne outfi
	jmp out_ran
	yte:
	outfi:
	mov ah, 00h         
	int 1ah           
	mov check[0],1 
	mov  ax, dx
	xor  dx, dx
	mov  cx, 10    
	div  cx
	rand:
	mov si,dx
	cmp check[si],0 
	je out_ran
	inc si 
	mov ax,si 
	xor dx,dx 
	mov bx,10 
	div bx
	loop rand 
	out_ran:
	mov point,si 
	mov check[si],4 
	ret
	other endp
;................................comch........................
comch proc
	mov point,0
	mov num,8
	call comdef
	cmp point,0
	jne comout
	mov num,2
	call comdef
	cmp point,0
	jne comout
	call other
	comout:
	mov ax,point 
	add ax,30h 
	mov k,al 
	inc ue
	ret
	comch endp
;.....................sleep.................
sleep proc
	push cx
	
	mov cx, 1000
	in_sleep:
	push cx
	
	mov cx, 1000
	out_sleep_loop:
	loop out_sleep_loop
	pop cx
	
	loop in_sleep
	
	pop cx
	ret
sleep endp
;......................cominp..................
cominp proc
	call sleep
	call sleep 
	call comch
	call clear
	call colorchar
	cmp signx,0 
	jne nsign3
	call ball
	jmp nsign6
	nsign3:
	call cross 
	nsign6:
	mov f,0
	call clearinput
	mov al,k
	mov c,al 
	mov y,16 
	mov x,55
	call cursor
	mov bl,7
	call printchar
	ret
	cominp endp
;.......................clearinput................
clearinput proc
	mov y,16 
	mov x,55
	mov si,0
  cinval:
	call cursor
	mov al,invin[si]
	cmp al,'$'
	je outc
	mov c,al
	mov bl,0 
	call printchar
	inc si
	inc x
	jmp cinval
	outc:
	ret
	clearinput endp
;.......................invalid input...............
invalidin proc
	mov y,16 
	mov x,55
	mov si,0
  inval:
	call cursor
	mov al,invin[si]
	cmp al,'$'
	je outi
	mov c,al
	mov bl,4  
	call printchar
	inc si
	inc x
	jmp inval
	outi:
	ret
	invalidin endp
;......................String Sign.............
sign proc 
    mov si,0 
ssign1:

    call cursor
    mov al,sign1[si]
    cmp al,'$'
    je outsig1
    mov c,al 
	mov bl,col
    call printchar
    inc si
    inc x
    jmp ssign1 
   outsig1:
	ret
	sign endp 
;......................String input..............
sinput proc
	mov y,16 
    mov x,48 
    mov si,0
	mov bl,3 
input1:

    call cursor
    mov al,input[si]
    cmp al,'$'
    je out1
    mov c,al 
    mov bl,3
    call printchar
    inc si
    inc x
    jmp input1 
   out1:
	ret
	sinput endp
	
;.........................clear Player1...........
cplayer1 proc
	mov y,12 
    mov x,64 
    mov si,0
ps7:
    call cursor
    mov al,np1[si]
    cmp al,'$'
    je pout7
    mov c,al 
    mov bl,0 
    call printchar
    inc si
    inc x
    jmp ps7  
   pout7:
	ret
	cplayer1 endp

;.........................clear Player2...........
cplayer2 proc
	mov y,12 
    mov x,64 
    mov si,0
ps8:
    call cursor
    mov al,np2[si]
    cmp al,'$'
    je pout8
    mov c,al 
    mov bl,0 
    call printchar
    inc si
    inc x
    jmp ps8  
   pout8:
	ret
	cplayer2 endp

;.........................clear Player3........
cplayer3 proc
	mov y,12 
    mov x,64 
    mov si,0
ps3:
    call cursor
    mov al,sp3[si]
    cmp al,'$'
    je pout3
    mov c,al 
    mov bl,0 
    call printchar
    inc si
    inc x
    jmp ps3  
   pout3:
	ret
	cplayer3 endp
	
;.........................clear Player4........
cplayer4 proc
	mov y,12 
    mov x,64 
    mov si,0
ps4:
    call cursor
    mov al,sp4[si]
    cmp al,'$'
    je pout4
    mov c,al 
    mov bl,0 
    call printchar
    inc si
    inc x
    jmp ps4 
   pout4:
	ret
	cplayer4 endp
	
;.........................String Player1..........
splayer1 proc
	cmp selp,1 
	jne man6
	call cplayer3
	man6:
	mov y,12 
    mov x,64 
    mov si,0
ps1:
    call cursor
	cmp selp,1
	jne com4
	mov al,sp4[si]
	jmp man4
	com4:
    mov al,np1[si]
	man4:
    cmp al,'$'
    je p1out
    mov c,al 
    mov bl,7
    call printchar
    inc si
    inc x
    jmp ps1  
   p1out:
	ret
	splayer1 endp
;.........................String Player2..........
splayer2 proc
	cmp selp,1 
	jne man7
	call cplayer4
	man7:
	mov y,12 
    mov x,64 
    mov si,0
ps2:
    call cursor
	cmp selp,1 
	jne man3
	mov al,sp3[si]
	jmp com3
	man3:
    mov al,np2[si]
	com3:
    cmp al,'$'
    je p2out
    mov c,al
	mov bl,7
    call printchar
    inc si
    inc x
    jmp ps2  
   p2out:
	ret
	splayer2 endp
;.........................String PlayerInTurn........
pinturn proc
	mov y,12 
    mov x,48 
    mov si,0
pti:
    call cursor
    mov al,pint[si]
    cmp al,'$'
    je pout
    mov c,al 
    mov bl,3
    call printchar
    inc si
    inc x
    jmp pti 
   pout:
	cmp f,0
	je pl1
	call cplayer1
	call splayer2
	cmp signx,0
	jne nsign4
	mov c,'O'
	jmp nsign5
	nsign4:
	mov c,'X'
	nsign5:
	mov y,14 
	mov x,55
	call cursor
	mov bl,7
	call printchar
	jmp spo
	pl1:
	call cplayer2
	call splayer1
	cmp signx,0
	jne nsign10
	mov c,'X'
	jmp nsign11
	nsign10:
	mov c,'O'
	nsign11:
	mov y,14 
	mov x,55
	call cursor
	mov bl,7
	call printchar
	spo:
	ret
	pinturn endp
	
;.......................................CLEAR...............
clear proc
;...........................print_string input........ 
	call sinput
	mov y,14
    mov x,48 
	mov col,3
	call sign 
    call pinturn
;..................................tchar.....................
    mov t_r,0
    mov c,'1' 
    mov y,9
tchar1: 
    mov t_c,0
    mov x,50   
  tchar2:
    call cursor 
    mov bl,1
    call printchar
    inc c
    add x,5
	inc t_c
	
	cmp t_c,3
	jne tchar2
	
	sub y,2  
	inc t_r
	cmp t_r,3
	jne tchar1
	   
	cmp v,1 
	jne nv
	call colorchar
	nv:
	
;....................................table.....................
	mov ah,0ch
	mov al,8
	mov cx,tc1
	

  	trow: 
	
	mov dx,tro2
	int 10h
	mov dx,tro3
	int 10h
	
    inc cx
    cmp cx, tc4
    JNE trow 
    mov dx,tro1
	tcolumn: 
	
	mov cx,tc2
	int 10h
	mov cx,tc3
	int 10h
	
    inc dx
    cmp dx, tro4
    JNE tcolumn 
    
;.....................grid...................
	mov ah,0ch
	mov al,14 
	mov cx,c1
	
	row: 
	mov dx,r2
	int 10h
	mov dx,r3
	int 10h
	
    inc cx
    cmp cx, c4
    JNE row 
    mov dx,r1
	
	column: 
	mov cx,c2
	int 10h
	mov cx,c3
	int 10h
	
    inc dx
    cmp dx, r4
    JNE column
	ret
	clear endp
	
;............................setcursor.............
setcursor proc
	mov bh,0 
	mov ch,6 
	mov cl,7
	mov ah,1 
	int 10h 
	ret
	setcursor endp 
	
;.................................cursor................
cursor proc
    mov bh,0
	mov dl,x
	mov dh,y
	mov ah,2
	int 10h
	ret
	cursor endp 

;................................printchar..........
printchar proc
    mov ah,09
	mov bh,0
	mov cx,1 
	mov al,c
	int 10h 
	ret
	printchar endp
	
;......................................page1................	

page1 proc
	mov ah,0
	mov al,12h
	int 10h
	mov selp,0 
	mov signx,0 
	call tict 
	mov count,1
	call box1
	call coloring1
	pg1:
	mov ax,0  				
	int 16h  
	cmp al,13 
	jne pg11
	cmp count,1 
    jne ne11
    call page2
    ret
    
    ne11:
    cmp count,2 
    jne ne12
    call page3
    ret
    
	ne12:
	mov ah,0 
	mov al,12h
	int 10h 
	mov ah,4ch 
	int 21h 
	ret 
	
    pg11:
    cmp ah,48h
    jne pg12
    dec count 
    cmp count,0
    jne ri
    mov count,3
    ri:
    call coloring1
    jmp pg1
    
    pg12:
    cmp ah,50h
    jne pg13
    inc count
    cmp count,4
    jne rit
    mov count,1
    rit:
    call coloring1
    pg13:
    jmp pg1 
    ret 
	page1 endp
;........................................String Tic tac toe.........
tict proc
	mov y,3  
    mov x,10  
    mov si,0  
ticta:
    call cursor
    mov al,ttt[si]
    cmp al,'$'
    je outttt
    mov c,al 
    mov bl,6  
    call printchar
    inc si
    inc x
    jmp ticta 
   outttt:
	ret
	tict endp
;.......................................String new game.........
snewg proc
	mov y,10  
    mov x,34  
    mov si,0  
sne:
    call cursor
    mov al,sng[si]
    cmp al,'$'
    je outne1
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp sne 
   outne1:
	ret
	snewg endp

;......................................About.........
hsre proc
	mov y,14 
    mov x,36
    mov si,0  
sre:
    call cursor
    mov al,hsr[si]
    cmp al,'$'
    je outsr1
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp sre 
   outsr1:
	ret
	hsre endp
	
;....................................How to play.......
htp proc
	mov y,12   
    mov x,33 
    mov si,0  
hop:
    call cursor
    mov al,poh[si]
    cmp al,'$'
    je outho1
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp hop  
   outho1:
	ret
	htp endp
;.............................................One Player........
opla1 proc
	mov y,10   
    mov x,33 
    mov si,0  
  opy:
    call cursor
    mov al,plr1[si]
    cmp al,'$'
    je outopy
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp opy   
   outopy:
	ret
	opla1 endp
	
;.......................................two player..............
opla2 proc
	mov y,12   
    mov x,33
    mov si,0  
  opy1:
    call cursor
    mov al,plr2[si]
    cmp al,'$'
    je outopy1
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp opy1   
   outopy1:
	ret
	opla2 endp 

;..................................backp...............
backp proc
    mov y,14  
    mov x,36  
    mov si,0  
  bac1:
    call cursor
    mov al,backp1[si]
    cmp al,'$'
    je outbac1
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp bac1   
   outbac1:
	ret
    backp endp

;..................box1...............
box1 proc
	mov ah,0ch
	mov al,7 
	mov cx,cp11
	
	rowp1:
	
	mov dx,rp12
	int 10h 
	mov dx,rp13
	int 10h
	
    inc cx
    cmp cx, cp12
    JNE rowp1 
	
	mov dx,rp10
	colp1:
	mov cx,cp13
	int 10h
	mov cx,cp14
	int 10h 
    inc dx
    cmp dx, rp15
    JNE colp1
	
	ret
	box1 endp

;..................................box2..............
box2 proc
	mov ah,0ch
	mov al,7 
	mov cx,cp11
	
	rowp2: 
	
	mov dx,rp12
	int 10h 
	mov dx,rp13
	int 10h
	
    inc cx
    cmp cx, cp12
    JNE rowp2
	
	mov dx,rp10
	colp2:
	mov cx,cp13
	int 10h
	mov cx,cp14
	int 10h 
    inc dx
    cmp dx, rp15
    JNE colp2
	
	ret
	box2 endp
;.............................box3....................
box3 proc
	mov ah,0ch
	mov al,7 
	mov cx,cp11
	
	rowp3:
	
	mov dx,rp13
	int 10h 
	
    inc cx
    cmp cx, cp12
    JNE rowp3 
	
	mov dx,rp11
	colp3:
	mov cx,cp13
	int 10h

    inc dx
    cmp dx, rp15
    JNE colp3
	
	ret
	box3 endp
	
;......................................box4.................
box4 proc
	mov ah,0ch
	mov al,7  
	
	mov dx,rp11
	colp4:
	mov cx,cp13
	int 10h

    inc dx
    cmp dx, rp14
    JNE colp4
	
	ret
	box4 endp	

	
;........................................coloringp1.........
coloring1 proc
    cmp count,1
    jne cg11
    mov col,2
	call snewg 
	mov col,1
	call htp
	call hsre
	ret
	
	cg11: 
	cmp count,2
    jne cg12
    mov col,1
	call snewg 
	mov col,2
	call htp 
	mov col,1
	call hsre
    ret
    
    cg12:
    mov col,1
	call snewg 
	call htp 
	mov col,2
	call hsre
    ret
    coloring1 endp
    
;..................................coloring2................
coloring2 proc
    cmp count,1
    jne cg21
    mov col,2
	call opla1 
	mov col,1
	call opla2
	call backp
	ret
	
	cg21: 
	cmp count,2
    jne cg22
    mov col,1
	call opla1 
	mov col,2
	call opla2 
	mov col,1
	call backp
    ret
    
    cg22:
    mov col,1
	call opla1 
	call opla2
	mov col,2
	call backp
    ret
    coloring2 endp
;............................String pagec......................
pageuc proc
	mov ah,0
	mov al,12h
	int 10h
	  open1:
           
            mov ah,3Dh
             mov al,0
             lea dx,filename
            int 21h
            mov handle,ax
         read1:
            lea dx,buffer
            mov ah,3fh
            mov al,0
            mov bx,handle
            mov cx,512
            int 21h
       
     
        mov si,0 
        mov y,3 
        print_loop1:
        mov x,10  
        add y,2
        print_loop:
             mov al,buffer[si]
             cmp al,0
             je ter
			 cmp buffer[si],13
			 je erout
             mov c,al
             call cursor
             call printchar
			 jmp crre
			 erout:
			 inc si
			 crre:
             inc si
             inc x 
			 cmp c,'.'
			 je print_loop1 
             cmp x,60
             jne print_lo1
			 dec y
			 jmp print_loop1 
			 print_lo1:
            jmp print_loop
        ter:
	mov ah,0
	int 16h 
	ret
	pageuc endp 
;........................................page3..............
page3 proc 
	call pageuc
	call page1
	ret
	page3 endp

;..........................................page2................	
page2 proc
	mov cdiv,0 
	mov ah,0
	mov al,12h
	int 10h
	call tict
	mov count,1
	call box2
	call coloring2
	pg2:
	mov ax,0  				
	int 16h  
	cmp al,13 
	jne pg21
	cmp count,1 
    jne ne21
	mov selp,1
	call page9
	call newgame1
    ret
    
    ne21:
    cmp count,2
    jne ne22
	call page8
	call newgame1 
    ret
    
    ne22:
    call page1
    ret 
    
    pg21:
    cmp ah,48h
    jne pg22
    dec count 
    cmp count,0
    jne ri2
    mov count,3
    ri2:
    call coloring2
    jmp pg2
    
    pg22:
    cmp ah,50h
    jne pg23
    inc count
    cmp count,4
    jne rit2
    mov count,1
    rit2:
    call coloring2
    pg23:
    jmp pg2 
    ret  
	page2 endp
	
;...............................player1 input...............	
namein1 proc 
	
	mov y,12 
	mov x,23
	call cursor
	mov bl,14 
	mov c,'>'
	call printchar
	
	mov x,35
	mov si,0 
   n1i:
	call cursor
	call setcursor
	mov ah,0
	int 16h
	cmp al,27 
	jne yu2
	call page1
	yu2:  
	cmp ah,0eh 
	jne bspace
	cmp si,0 
	je n1i 
	mov al,np1[si-1]
	mov c,al
	dec si 
	dec x
	call cursor 
	call setcursor 
	mov bl,0 
	call printchar
	jmp n1i 
	
	bspace:
	cmp al,13 
	jne enterp
	cmp si,0 
	je n1i 
	mov np1[si],'$'
	cmp selp,1 
	jne nco
	mov np2[si],'$'
	nco:
	ret
	
	enterp:
	mov np1[si],al 
	cmp selp,1 
	jne nco1
	mov np2[si],al
	nco1:
	mov c,al 
	mov bl,7
	call printchar 
	inc si 
	inc x 
	jmp n1i 
	
	ret
	namein1 endp 
;.............................name in2......................
namein2 proc 
	mov y,12 
	mov x,23  
	call cursor
	mov bl,0  
	mov c,'>'
	call printchar
	
	mov y,14
	mov x,19 
	call cursor
	mov bl,14 
	mov c,'>'
	call printchar
	mov x,35 
	mov si,0 
   n2i:
	call cursor
	call setcursor
	mov ah,0
	int 16h
	cmp al,27 
	jne yu3
	call page1
	yu3:
	cmp ah,0eh 
	jne bspace1
	cmp si,0 
	je n2i 
	mov al,np2[si-1]
	mov c,al
	dec si 
	dec x
	call cursor 
	call setcursor 
	mov bl,0 
	call printchar
	jmp n2i 
	
	bspace1:
	cmp al,13 
	jne enterp1
	cmp si,0 
	je n2i 
	mov np2[si],'$'
	ret
	
	enterp1:
	mov np2[si],al 
	mov c,al 
	mov bl,7
	call printchar 
	inc si 
	inc x 
	jmp n2i 
	
	ret
	namein2 endp
	
;.........................String entername.........
namen proc
	mov y,8    
    mov x,15     
    mov si,0  
 nama:
    call cursor
    mov al,entern[si]
    cmp al,'$'
    je out_ent
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp nama   
   out_ent:
	ret
	namen endp	
;...........................String you................
you proc
   
    mov si,0  
 youa:
    call cursor
    mov al,sp4[si]
    cmp al,'$'
    je out_you
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp youa  
   out_you:
	ret
	you endp

;.........................String Opponent..........
opponent proc
	mov y,14   
    mov x,21  
    mov si,0  
 oppo:
    call cursor
    mov al,oppon[si]
    cmp al,'$'
    je out_opp
    mov c,al 
    mov bl,col 
    call printchar
    inc si
    inc x
    jmp oppo   
   out_opp:
	ret
	opponent endp

;.........................box6..................
box6 proc
	mov ah,0ch
	mov al,7  
	
	mov dx,320
	colp6:
	mov cx,cp13
	int 10h
	mov cx,cp14
	int 10h
    inc dx
    cmp dx, 360 
    JNE colp6
	
	ret
	box6 endp
;..........................coloring8.........
coloring8 proc
    cmp count,1
    jne cg81
	mov y,21 
	mov x,36
	call cursor
	mov c,'X'
	mov bl,2 
	call printchar
	mov y,21 
	mov x,50   
	call cursor
	mov c,'O'
	mov bl,1 
	call printchar
	ret
	
	cg81: 
	cmp count,2 
    jne cg81
	mov y,21 
	mov x,36 
	call cursor
	mov c,'X'
	mov bl,1 
	call printchar 
	mov y,21 
	mov x,50   
	call cursor
	mov c,'O'
	mov bl,2 
	call printchar
    ret
    coloring8 endp
;..........................choosesi...........
choosesi proc 

	mov count,1  
   choo:
	call coloring8
	mov ah,0 
	int 16h
	cmp al,27 
	jne yu4
	call page1
	yu4:
	cmp al,13 
	jne cho1
	cmp count,1
	jne nex9
	mov signx,0 
	ret 
	nex9:
	mov signx,1 
	ret 
	
	cho1:
	cmp ah,4bh
	jne cho2
	dec count 
	cmp count,0 
	jne chois1
	mov count,2  
	chois1:
	jmp choo  
	
	cho2:
	cmp ah,4dh
	jne choo  
	inc count 
	cmp count,3  
	jne chois2
	mov count,1 
	chois2:
	jmp choo  
	ret
	choosesi endp
;..........................page8...................	
page8 proc
	mov ah,0
	mov al,12h
	int 10h
	
	mov y,21 
	mov x,36 
	call cursor
	mov c,'X'
	mov bl,1 
	call printchar 
	mov y,21 
	mov x,50   
	call cursor
	mov c,'O'
	mov bl,1  
	call printchar
	mov col,9
	call namen
	mov col,4 
	mov y,12   
    mov x,25 
	call you
	mov y,21      
    mov x,25 
	call you
	call opponent
	mov y,19 
    mov x,15
	mov col,9
	call sign 
	call box3
	call box6
	call namein1
	mov col,2 
	mov y,12   
    mov x,25
	call you
	call namein2
	mov col,2 
	call opponent
	mov y,14
	mov x,19 
	call cursor
	mov bl,0  
	mov c,'>'
	call printchar
	mov y,21  
	mov x,23
	call cursor
	mov bl,14 
	mov c,'>'
	call printchar
	call choosesi
	mov y,21      
    mov x,25 
	mov col,2 
	call you
	call sleep
	call sleep 
	ret
	page8 endp
	
;..........................page9...................	
page9 proc
	mov ah,0
	mov al,12h
	int 10h
	mov ue,0 
	mov y,21 
	mov x,36 
	call cursor
	mov c,'X'
	mov bl,1 
	call printchar 
	mov y,21 
	mov x,50   
	call cursor
	mov c,'O'
	mov bl,1  
	call printchar
	
	mov col,9
	call namen
	mov col,4  
	mov y,12   
    mov x,25 
	call you
	mov y,21      
    mov x,25 
	call you
	mov y,19 
    mov x,15
	mov col,9
	call sign 
	
	call box4
	call box6
	call namein1
	mov col,2 
	mov y,12   
    mov x,25
	call you
	mov y,12 
	mov x,23
	call cursor
	mov bl,0  
	mov c,'>'
	call printchar
	mov y,21  
	mov x,23
	call cursor
	mov bl,14 
	mov c,'>'
	call printchar
	call choosesi
	mov y,21      
    mov x,25 
	mov col,2 
	call you
	call sleep
	call sleep 
	ret
	page9 endp

;.....................box5.................
box5 proc
	mov ah,0ch
	mov al,7  
	
	mov dx,370
	colp5:
	mov cx,cp13
	int 10h
	mov cx,cp14
	int 10h
    inc dx
    cmp dx, 410
    JNE colp5
	
	ret
	box5 endp
	
;.........................string main game..............
press proc
	mov y,24  
    mov x,20  
    mov si,0
   opre1:

    call cursor
    mov al,prs[si]
    cmp al,'$'
    je ops1
    mov c,al 
	mov bl,col 
    call printchar
    inc si
    inc x
    jmp opre1
    ops1:
	ret
	press endp
	
;......................exit............................
eixt proc 
	mov y,24 
	mov x,48
    mov si,0
	escp3:
	call cursor
    mov al,ent[si]
    cmp al,'$'
    je outexi3
    mov c,al 
    mov bl,col  
    call printchar
    inc si
    inc x
    jmp escp3
	outexi3:
	ret
	eixt endp 
	
;................................continue...................
contini proc 
	mov y,24 
	mov x,34
    mov si,0
	escp4:
	call cursor
    mov al,conti[si]
    cmp al,'$'
    je outexi4
    mov c,al 
	mov bl,col 
    call printchar
    inc si
    inc x
    jmp escp4
	outexi4:
	ret
	contini endp 
;........................coloring4............
coloring4 proc
    cmp count,1
    jne cg41
	mov col,2 
	call press
	mov col,1
	call contini 
	call eixt
	ret
	
	cg41: 
	cmp count,2
    jne cg42
	mov col,2 
	call contini
	mov col,1
	call  press
	call eixt
	ret
    
    cg42:
	mov col,1  
	call contini
	call  press
	mov col,2  
	call eixt
    ret
    coloring4 endp
;.........................page10.......................
page10 proc
	call box5
	mov count,2 
   exitc:
	call coloring4
	mov ah,0 
	int 16h
	cmp al,13 
	jne ect1
	cmp count,1
	jne nex3
	call page1
	nex3:
	ret 
	
	ect1:
	cmp ah,4bh
	jne ect2
	dec count 
	cmp count,0 
	jne com7
	mov count,3 
	com7:
	jmp exitc 
	
	ect2:
	cmp ah,4dh
	jne exitc 
	inc count 
	cmp count,4 
	jne com8 
	mov count,1 
	com8:
	jmp exitc 
	ret
   page10 endp
;.........................oname...................
oname proc 

	mov cx,410  
	mov si,0 
	bno20:
	mov dx,360   
	bno21:
	mov ah,0ch
	mov al,sbr[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,412
	jne bno21 
	inc cx 
	cmp cx,435 
	jne bno20
	
	mov cx,540  
	mov si,0 
	bn1o20:
	mov dx,360   
	bn1o21:
	mov ah,0ch
	mov al,br2[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,411
	jne bn1o21 
	inc cx 
	cmp cx,567 
	jne bn1o20
	
	mov y,23
    mov x,55 
    mov si,0
	mov bl,6  
   oname1:

    call cursor
    mov al,shohan[si]
    cmp al,'$'
    je out_nae1
    mov c,al 
    call printchar
    inc si
    inc x
    jmp oname1  
   out_nae1:
   
   	mov y,24  
    mov x,57  
    mov si,0
	mov bl,6  
   oname2:

    call cursor
    mov al,shafayat[si]
    cmp al,'$'
    je out_nae2
    mov c,al 
    call printchar
    inc si
    inc x
    jmp oname2
	out_nae2:
	ret 
	oname endp 
;.........................front page............
	pagefs proc
	lloo1:
	mov ah,00h
	mov al,12h
	int 10h
	call oname
	mov si,0 
	lin:
	mov rae[si],0 
	inc si 
	cmp si,10 
	jne lin
	mov rae[0],1 
	mov lco,1 
	lloo:
	call boxf
	mov ah,01h
	int 16h
	jnz out_fpage1
	call sleep
	mov ah, 00h         
	int 1ah            
	mov  ax, dx
	xor  dx, dx
	mov  cx, 10      
	div  cx
	rand1:
	out_fpage1:
	mov ah,01h
	int 16h
	jnz out_fpage2
	mov si,dx
	cmp rae[si],0 
	je out_ran1
	inc si 
	mov ax,si 
	xor dx,dx 
	mov bx,10 
	div bx
	loop rand1 
	
	out_ran1:
	
	mov let,si 
	call letter
	mov rae[si],1 
	inc lco
	cmp lco,12  
	jne lloo 
	out_fpage2:
	mov ah,01h
	int 16h
	jnz out_fpage3
	
	call sleep
	mov let, 1 
	call letter
	mov let, 2 
	call letter
	mov let, 3
	call letter
	mov let, 4
	call letter
	mov let, 5 
	call letter
	mov let, 6 
	call letter
	mov let, 7
	call letter
	mov let, 8 
	call letter
	mov let, 9
	call letter
	out_fpage3:
	mov ah,01h
	int 16h
	jnz out_fpage4
	call sleep 
	call sleep 
	jmp lloo1
	out_fpage4:
	ret 
pagefs endp
letter proc 
	cmp let,1  
	jne nel1
	mov cx,201 
	mov si,0 
	lo2:
	mov dx,101 
	lo1:
	mov ah,0ch
	mov al,tcolor[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,144
	jne lo1
	inc cx 
	cmp cx,243 
	jne lo2 
	ret 
	
	nel1:
	cmp let,2  
	jne nel3
	mov cx,251 
	mov si,0 
	lo6:
	mov dx,101
	lo7:
	mov ah,0ch
	mov al,icolor[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,145
	jne lo7
	inc cx 
	cmp cx,287 
	jne lo6 
	ret 
	
	nel3:
	cmp let,3   
	jne nel4
	mov cx,301 
	mov si,0 
	lo8:
	mov dx,101
	lo9:
	mov ah,0ch
	mov al,c_color[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,142
	jne lo9
	inc cx 
	cmp cx,340 
	jne lo8 
	ret 
	
	nel4:
	cmp let,4 
	jne nel5
	mov cx,201   
	mov si,0 
	lo12:
	mov dx,151
	lo13:
	mov ah,0ch
	mov al,tcolor[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,194
	jne lo13 
	inc cx 
	cmp cx,243 
	jne lo12 
	ret 
	
	nel5:
	cmp let,5  
	jne nel6
	mov cx,251  
	mov si,0 
	lo14:
	mov dx,151 
	lo15:
	mov ah,0ch
	mov al,a_color[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,192
	jne lo15
	inc cx 
	cmp cx,300  
	jne lo14  
	ret 
	
	nel6:
	cmp let,6
	jne nel7
	mov cx,301  
	mov si,0 
	lo17:
	mov dx,151
	lo16:
	mov ah,0ch
	mov al,c_color[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,192
	jne lo16 
	inc cx 
	cmp cx,340  
	jne lo17 
	ret 
	
	nel7:
	cmp let,7 
	jne nel8
	mov cx,201  
	mov si,0 
	lo18:
	mov dx,201 
	lo19:
	mov ah,0ch
	mov al,tcolor[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,244
	jne lo19
	inc cx 
	cmp cx,243 
	jne lo18  
	ret 
	
	nel8:
	cmp let,8 
	jne nel9
	mov cx,251 
	mov si,0 
	lo20:
	mov dx,201 
	lo21:
	mov ah,0ch
	mov al,o_color[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,241
	jne lo21 
	inc cx 
	cmp cx,294 
	jne lo20
	ret 
	
	nel9:
	cmp let,9
	jne nel10
	mov cx,301  
	mov si,0 
	lo22:
	mov dx,201 
	lo23:
	mov ah,0ch
	mov al,e_color[si]
	int 10h 
	inc dx 
	inc si 
	cmp dx,242 
	jne lo23 
	inc cx 
	cmp cx,347 
	jne lo22
	nel10:
	ret 
 letter endp 
 
boxf proc
	mov ah,0ch
	mov al,7 
	mov cx,200
	
	rowfr1:
	
	mov dx,150
	int 10h 
	mov dx,200
	int 10h
	
    inc cx
    cmp cx,350
    JNE rowfr1 
	
	mov dx,100 
	colfr1:
	mov cx,250 
	int 10h
	mov cx,300
	int 10h 
    inc dx
    cmp dx,250 
    JNE colfr1
	
	ret
	boxf endp	
end   main